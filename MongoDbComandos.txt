Comandos MongoDb

// Criar um novo BD
	use(database);

// Criar um novo documento/coleção
	db.createCollection(collection);

// Deletar uma coleção
	db.series.drop();

// Deletar um BD
	db.dropDatabase()


// Inserindo um documento no documento "Serie"
use(database);
db.series.insertOne({
    "Série": "Fleabag",
    "Ano de lancamento": 2016,
    "Temporadas disponíveis": 2,
    "Linguagem": "Inglês",
    "IMdb Avaliação" : 8.7
});


// Inserindo um array de documentos via InsertMany
use("Alura_Serie");
db.series.insertMany([{
    "Série": "Made in Heaven",
    "Temporadas disponíveis": 1,
    "Linguagem": "Hindi", 
    "IMdb Avaliação" : 8.3,
    "Classificação": "18+"
},
{
    "Série": "Homecoming",
    "Temporadas disponíveis": 2,
    "Linguagem": "Inglês",
    "Genero": ["Drama"],
    "IMdb Avaliação" : 8.7,
    "Classificação": "16+"
}]);


// Retornando todos os documentos de uma collection
	db.series.find();

// Retornando todos os documentos de uma collection cujo Ano de lançamento seja igual a 2016
	db.series.find({"Ano de lancamento": 2016});

// Retornando apenas determinadas "colunas" dentro do documento
	db.series.find({}, {"Série": 1, "Ano de lancamento": 1, "_id": 0});

// Retornando todos os documentos que possuem ano de lançamento iguais a 2016 ou 2017
	db.series.find({"Ano de lancamento": {$in: [2016, 2017]}});

// Limitando o retorno dos documentos
	db.series.find().limit(2);

// Ordenando o retorno da busca com base em um campo específico
	db.series.find().sort({"Série": 1});

// Retornando os documentos com base no filtro gte
	db.series.find({"Temporadas disponíveis": {$gte: 2}});

// Retornando os documentos cujo o valor seja diferente do informado no filtro
	db.series.find({"Temporadas disponíveis": {$ne: 2}});

// Retornando documentos que possuem um array com determinado valor
	db.series.find({"Genero": {$all: ["Drama"]}});


// Atualizando um documento e adicionando uma nova propriedade ao mesmo caso essa não exista
	db.series.updateOne({"Série": "Made in Heaven"}, {$set: {"Ano de lancamento": 2015}});

// Atualizando todos os documentos cujo o texto da propriedade Série esteja dentro do array informado
// e adiciona ou atualiza a propriedade Classificação nos documentos retornados
	db.series.updateMany({"Série":{$in:["Homecoming", "Fleabag"]}},{$set: {"Classificação": "18+"}})

// É possível substituir um documento inteiro com base no filtro utilizando o método replaceOne
	db.collection.replaceOne(
   		<filter>,
   		<replacement> )

// Deletando apenas um documento com base em um filtro especificado
	db.series.deleteOne({"Série": "The Boys"})

// Deletando vários documentos com base em um filtro especificado
	db.series.deleteMany({"Temporadas disponíveis": 1})

// Deletando todos os documentos de uma coleção
	db.series.deleteMany({})


// criando uma collection com um validador dos campos

db.createCollection("clientes", 
    {
        validator: {
            $jsonSchema: {
                bsonType: "object",
                required: ["nome", "cpf", "status_civil", "data_nascimento", "endereco"],
                properties: {
                    nome: {
                        bsonType: "string",
                        description: "Informe corretamente o nome do cliente"
                    },
                    cpf: {
                        bsonType: "string",
                        description: "Informe corretamente o cpf do cliente"
                    },
                    status_civil: {
                        bsonType: "string",
                        enum:["Solteiro(a)", "Casado(a)", "Separado(a)", "Divorciado(a)", "Viúvo(a)"],
                        description: "informe corretamente o status civil do cliente"
                    },
                    data_nascimento: {
                        bsonType: "string",
                        description: "Informe corretamente a data de nascimento do cliente"
                    },
                    endereco:{
                        bsonType: "string",
                        description: "informe corretamente o endereço do cliente"
                    }
                }
            }
        }
    })


// Obtendo os validadores de cada collection
	db.getCollectionInfos({name: "clientes"})


// Identificando documentos válidos
	let clientes = 
 {    $jsonSchema: 
    {      required: [ "nome", "cpf",  "status_civil", "data_nascimento", "endereco" ],
      properties: 
      {         nome: {
            bsonType: "string",
            maxLength: 150,
            description: "O nome do cliente deve ser informado corretamente"
         },         cpf: {
            bsonType: "string",
            minLength:14,
            maxLength: 14,
            description: "O CPF do cliente deve ser informado"
         },         status_civil: {
            enum: [ "Solteiro(a)", "Casado(a)", "Separado(a)", "Divorciado(a)", "Viúvo(a)" ],
            description: "Informe um dos valores presentes em ENUM"
         },         data_nascimento: {
            bsonType: "string",
            description: "A data de nascimento do cliente deve ser informado corretamente"
         },         endereco: {
            bsonType: "string",
            description: "O endereço do cliente deve ser informado corretamente"
         }         }     }   } 

// Identifica documentos que sao validos
db.clientes.find(contas)

// identifica documentos invalidos
db.clientes.find( { $nor: [ contas ] } )


// relacionando documentos através de dbRef
	original_id = ObjectId()

db.clientes.insertOne({
"_id": original_id,
"Nome": "Gustavo Marcos dos Santos",
"CPF": "936.261.726-94",
"Data_Nascimento": "11/02/1957",
"Genero": "Masculino",
"Profissao": "Gerente de vendas",
"Status_Civil": "Separado(a)"})

db.contas.insertOne({
"_id": ObjectId(),
"creator":{
    "$ref": "clientes",
    "$id": original_id,
    "$db": "modelagem02"
    },
"Numero_Conta": "48495901-2",
"Agência": "5575",
"Tipo": "Conta corrente",
"CPF": "936.261.726-94",
"Valor": 2.366})

db.endereco.insertOne({
"creator": {
    "$ref": "clientes",
    "$id": original_id,
    "$db": "modelagem02"},
"Rua": "Adelso Ferreira Tavares",
"Numero": 661,
"Bairro": "Tubalina",
"Cidade": "Uberlândia",
"Estado": "MG",
"CEP": "38412-010"
})


// Retornando o nome do banco no qual estamos conectados
	db.getName()

// Renomeando uma collection
	db.Endereco.renameCollection("Enderecos")


// Utilizando o operador $eq para busca utilizando operador de igualdade
	db.Clientes.find({genero: {$eq: "Masculino"}})

// Utilizando o operador $gt(maior que)
	db.Contas.find({valor: {$gt: 9000}})

// Utilizando o operador $in para buscar documentos com base num array de valores
	db.Clientes.find({status_civil: {$in:["Viúvo(a)", "Casado(a)"]}})

// Utilizando o operador $and
	db.Contas.find(
    {
        $and: [
            {
                tipo: {$eq: "Conta salário"}
            }, 
            {
                valor: {$gt: 9000}
            }]
    })


// Utilizando o operador $or
	db.Contas.find(
    {
        $or: [
            {
                tipo: {$eq: "Conta salário"}
            }, 
            {
                valor: {$gt: 9000}
            }]
    })


// Utilizando o operador $not
	db.Enderecos.find(
    {
        estado: {
            $not:{
                $eq:"SP"
            }
        }
    })


// Utilizando o operador $exists para verificar documentos que possuam determinado campo apenas
	db.Clientes.find({
    		dependentes: {
        		$exists: true
    		}
	})


// Retorna todos os registros cujo o array seguros contenha os valores informados no filtro
	db.Clientes.find({seguros: {$all: ["seguro de vida", "seguro para carro"]}})

// Retorna todos os registros cujo o array dependentes possua 2 elementos
	db.Clientes.find({dependentes: {$size:2}})

// Com base nos registros que possuem 2 dependentes, irá retornar apenas 1 dependente
	db.Clientes.find(
    {
        dependentes: {
            $size:2
        }
    }, 
    {
        dependentes:{
            $slice: 1
    }})

// Limitando o quantidade de registros retornados através do limit
	db.Clientes.find({}).limit(1)

// Utilizando o skip para "pular" uma certa quantidade de registros
	db.Clientes.find({}).limit(5).skip(10)

// Ordenando os documentos de forma crescente
	db.Clientes.find().sort({ nome:1 })

// Ordenando os documentos de forma decrescente
	db.Clientes.find().sort({ nome:-1 })	

// Utilizando o distinct
	db.Contas.distinct("tipo")

// Utilizando aggregate
	-- total de clientes será o nome da "coluna" que irá armazenar o total de clientes
	db.Clientes.aggregate({$count: "total de clientes"})

// Retornando a quantidade de documentos por tipo de conta
	db.Contas.aggregate(
    {
        $group: {
            _id: "$tipo",
            contagem: {
                $count: {
                    
                }
            }
        }
    })


// Utilizando aggregate com múltiplos estágios
	db.Contas.aggregate([
       {
         $limit: 3
       },
       {
         $skip: 1
       }
       ])

// Unwind: para cada elemento de um determinado array, será retornado um novo documento
	db.Clientes.aggregate([{$unwind: "$seguros"}])

// SortByCount: retorna a contagem dos elementos retornados pelo unwind
	db.Clientes.aggregate([{$unwind: "$seguros"}, {$sortByCount: "$genero"}])

// Utilizando o match para filtrar documentos
	db.Enderecos.aggregate([{$match: {cidade: "Recife"}}])


// Utilizando lookup para buscar documentos relacionados em outra collection
	db.Clientes.aggregate([{
    $lookup: {
           from: "Contas",
           localField: "cpf",
           foreignField: "cpf",
           as: "clientes_contas"
         }
}])


// Utilizando o project no aggregate para retornar apenas os campos desejados
	db.Clientes.aggregate([{
    $lookup: {
           from: "Contas",
           localField: "cpf",
           foreignField: "cpf",
           as: "clientes_contas"
         }
    },
    {
        $project: {
            _id:0,
            data_nascimento: 0,
            genero: 0,
            profissao: 0
        }
    }])


// Utilizando o limit dentro do aggregate para retornar apenas a quantidade de elementos especificados
	db.Clientes.aggregate([{
    $lookup: {
           from: "Contas",
           localField: "cpf",
           foreignField: "cpf",
           as: "clientes_contas"
         }
    },
    {
        $project: {
            _id:0,
            data_nascimento: 0,
            genero: 0,
            profissao: 0
        }
    }, 
    {
        $limit: 5
    }])


// Projetando uma nova coluna com valor calculado
	db.Contas.aggregate([
    {
        $project:{
            _id:0,
            valor:1,
            dividido:{
                $divide:["$valor", 2]
            }
        }
    }
])


// Efetuando o parse de uma coluna com valor calculado
db.Contas.aggregate([
    {
        $project:{
            _id:0,
            valor:1,
            dividido:{
                $divide:[{$toDouble:"$valor"}, 2]
            }
        }
    }
])


// Utilizando o concat para concatenar valores
db.Clientes.aggregate([
    {
        $project: {
            descricao: {
                $concat: ["$nome", "-", "$cpf"]
            }
        }
    }])


// Convertendo valores para string
db.Contas.aggregate(
    {
        $project: {
            valor: {
                $toString: "$valor" 
            }
        }
    })


// Retorna a media dos valores para cada tipo de conta presente na collection
db.Contas.aggregate(
    {
        $group:{
            _id:"$tipo",
            media:{
                $avg:"$valor"
            }
        }
    })


// Retorna o total e a media dos valores agrupados pelo tipo de conta
b.Contas.aggregate({
    $group: { 
        _id: "$tipo",
        valor_total: {
            $max: "$valor"
        },
        valor_medio: {
            $avg: "$valor"
        }
    }
})

// Retorna o total e a média apenas das contas do tipo "Conta poupança"
db.Contas.aggregate([
    {$match:{tipo:"Conta poupança"}},
    { $group:{
            _id:"$tipo",
                Total:{
                    $sum:"$valor"
            }, 
                Media:{
                    $avg:"$valor"
                }    
        }
    }
)

// Utilizando o operador #cond para criar condicionais
db.Contas.aggregate([{
   $project:{
         cpf:1,
             tipo:1,
             valores:{
                 $cond:[{$gte:["$valor",8000]}, "VERDADEIRO", "FALSO"]
             }
        }
}])

// Utilizando o operador ifNull para criar uma condicional com base em valores nulos
db.Contas.aggregate([{
    $project:{
            valor:{
                    $ifNull:["$valor", "Não Especificado"]
                }
       }
}])

